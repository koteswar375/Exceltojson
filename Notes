Guru99 - 04/10
Web application terms:
Scalability - web application is said to be scalable if by adding more hardware, application can linearly take more requests than before.
Two ways of adding more hardware are:
Scaling Up (vertical scaling) :– increasing the number CPUs or adding faster CPUs on a single box.
Scaling Out (horizontal scaling) :– increasing the number of boxes.
Response time - Time taken by web application to process request and return response
An application is said to be performing well if it can handle more requests with-out degrading response time by just adding more resources.

Response Time Vs Scalability 
Response time and Scalability don’t aways go together i.e. application might have acceptable response times but can not handle more than certain number of requests or application is handle increasing number of requests but has poor or long response times. We have strike a balance between scalability and response time to get good performance of the application.

Capacity Planning 
Capacity planning is an exercise of figuring out the required hardware to handle expected load in production. 

CPU Bound Application:
An application is said to be CPU bound if application throughput is limited by its CPU. By increasing CPU speed application response time can be reduced.

Few scenarios where applications could be CPU Bound
Applications which are computing or processing data with out performing IO operations. (Finance or Trading Applications)
Applications which use cache heavily and don’t perform any IO operations
Applications which are asynchronous (i.e. Non Blocking), don’t wait on external resources. (Reactive Pattern Applications, NodeJS application)

IO Bound Application
An application is said to be IO bound if application throughput is limited by its IO or network operations and increasing CPU speed does not bring down application response times. Most applications are IO bound due to the CRUD operation in most applications 

Few scenarios where applications could be IO Bound

Applications which are depended on database and perform CRUD operations
Applications which consume drown stream web services for performing its operations


About chrome V8:
V8 is Google’s open source high-performance JavaScript engine, written in C++ and used in Google Chrome, the open source browser from Google, and in Node.js, among others. It implements ECMAScript as specified in ECMA-262, and runs on Windows 7 or later, macOS 10.5+, and Linux systems 
V8 can run standalone, or can be embedded into any C++ application(Node JS). 

Node uses the V8 JavaScript Runtime engine, the one which is used by Google Chrome. Node has a wrapper over the JavaScript engine which makes the runtime engine much faster and hence processing of requests within Node also become faster.
NodeJs is a CPU bound application which means that the response time decreases with increasing CPU speed.

Guru99 - 04/11
Runtime Environment:
The runtime environment provides a state for the target machine to have access to resources such as software libraries, system variables and environment variables, and provide all necessary services and support to the processes involved in the execution of the application or program. In certain software or applications such as Adobe Flash Player or Microsoft PowerPoint Viewer the runtime environment is available to end users as well.

Software developers need a runtime environment to test their software's functioning. As a result, all software development applications include a runtime environment component which allows the testing of the application during execution. Tracking bugs or debugging for any errors are done in most applications with the help of runtime environments. Runtime execution continues even if the application or program crashes. Most runtime environments are capable of reporting of why an application or program crashed. One of the more popular runtime environments is Java, which helps Java applets and applications to be executed in any machine which has a Java runtime environment installed.


NODEJS:

Node.js is an open-source, cross-platform runtime environment used for development of server-side web applications.
Node.js applications are written in JavaScript and can be run on a wide variety of operating systems.
Node uses the V8 JavaScript Runtime engine, the one which is used by Google Chrome.
Google announced Chrome and its new V8 JavaScript engine in late 2008, which fundamentally enabled JavaScript to run faster than before—a lot faster!.

The V8 JavaScript engines greatest advantage over other JavaScript engines was the compiling of JavaScript code to native machine code before executing it. This and other optimizations made JavaScript a viable programming language capable of executing complex tasks.

The V8 JavaScript engine wasn’t built to run in a server environment, primarily because JavaScript was originally developed to support browser operations and designed around browser events.
Node has a wrapper over the JavaScript engine which makes the runtime engine much faster and hence processing of requests within Node also become faster.

NodeJs is a CPU bound application which means that the response time decreases with increasing CPU speed.
Features of Node.js:
Asynchronous event driven IO helps concurrent request handling:
This feature basically means that if a request is received by Node for some Input/Output operation, it will execute the operation in the background and continue with processing other requests.
Node uses the V8 JavaScript Runtime engine:
Node has a wrapper over the JavaScript engine which makes the runtime engine much faster and hence processing of requests within Node also become faster.

Who uses Node.js
LinkedIn 
Paypal 
Mozilla has implemented Node.js to support browser APIs 
Ebay hosts their HTTP API service in Node.js

When to Use Node.js
Node.js is best for usage in streaming or event-based real-time applications like
Game servers
Chat applications
Streaming servers
Advertisement servers
Node.js is good when you need high levels of concurrency but less amount of dedicated CPU time.

When to not use Node.js
Node.js can be used for a lot of applications with various purpose, the only scenario where it should not be used is if there are long processing times which is required by the application.
Node is structured to be single threaded. If any application is required to carry out some long running calculations in the background. So if the server is doing some calculation, it won't be able to process any other requests. As discussed above, Node.js is best when processing needs less dedicated CPU time.

04/12
====

Stateless model and stateful model:
The stateful and stateless models of software application behavior define how a user’s web browser communicates with a web server. 
In a stateless model, a client program makes a request to an application server, which sends data back to the client. The server treats all client connections equally and saves no information from prior requests or sessions.A website that serves up a simple static web page is a good example of the stateless model. 
In a stateful mode, the server keeps track of who users are and what they do from one screen to the next.Preserving the state of users’ actions is fundamental to having a meaningful, continuous session.

Why use Nodejs:
with Node.js web applications, you can now work in real-time and have a 2-way communication. The state is maintained, and the either the client or server can start the communication.

Code Explanation:
The basic functionality of the "require" function is that it reads a JavaScript file, executes the file, and then proceeds to return an object. 
Using this object, one can then use the various functionalities available in the module called by the require function.
http.createServer(function (req, res) {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.end('Hello World!');
}).listen(8080);
we are creating a server application which is based on a simple function. This function is called, whenever a request is made to our server application.
When a request is received, we are asking our function to return a "Hello World" response to the client. The writeHead function is used to send header data to the client and while the end function will close the connection to the client.
We are then using the server.listen function to make our server application listen to client requests on port no 7000

04/13
===

A module in Node.js is a logical encapsulation of code in a single unit.
Some of the popular modules:
Socket.io - - Socket.IO enables real-time bidirectional event-based communication. This module is good for creation of chatting based applications.
Jade - a high-performance template engine
MongoDB  - officially supported node.js driver for MongoDB
Bluebird  -  library with focus on innovative features and performance

require() keyword is used to incorporate the functionality of a module in an application.

Additional Info:
An Ajax call is an asynchronous request initiated by the browser that does not directly result in a page transition.
An Ajax ("Asynchronous Javascript and XML") request is sometimes called an XHR request ("XmlHttpRequest")
The browser will send probably a POST request via XHR to the server and be notified of the response (hence "asynchronous"). But the server typically can't distinguish between an Ajax request or a page transition because both simply come down to HTTP requests.

Internet is often called "TCP/IP" network. At the low level (IP, Internet Protocol) the Internet is packet-oriented. Hosts send packets to other hosts.
There is overhead in establishing a new TCP connection (DNS lookups, TCP handshake, SSL/TLS handshake, etc). Without a keep-alive, every HTTP request has to establish a new TCP connection, and then close the connection once the response has been sent/received. A keep-alive allows an existing TCP connection to be re-used for multiple requests/responses, thus avoiding all of that overhead. That is what makes the connection "persistent".
In HTTP 0.9 and 1.0, by default the server closes its end of a TCP connection after sending a response to a client. The client must close its end of the TCP connection after receiving the response. In HTTP 1.0 (but not in 0.9), a client can explicitly ask the server not to close its end of the connection by including a Connection: keep-alive header in the request. If the server agrees, it includes a Connection: keep-alive header in the response, and does not close its end of the connection. The client may then re-use the same TCP connection to send its next request.
In HTTP 1.1, keep-alive is the default behavior, unless the client explicitly asks the server to close the connection by including a Connection: close header in its request, or the server decides to includes a Connection: close header in its response.

full duplex - A telephone conversation is full-duplex (both parties, if they so wish, may talk at the same time and be heard)
half-duplex - a walkie talkie conversation is half-duplex (one talks, the other listens).

A Keep Alive HTTP header indicates a persistent connection with HTTP server. . The main objects is to eliminate the needs for opening TCP connection for each HTTP request. However, while there is a persistent connection open, the protocol for communication between client and server is still following the basic HTTP request/response pattern. In other word, server side can't push data to client.
WebSocket is used to setup a persistent, full-duplex connection. With this full-duplex connection, server side can push data to client and client should be expected to process data from server side at any time.

The Need For Keep-Alive
Creating multiple connections may reduce the loading time. It also utilizes many resources on the server. We can eventually overcome this issue and transfer all those files through a single connection by enabling the Keep-Alive, which avoids the need to repeatedly open and close a new connection. If it is not enabled, the process could take considerably longer to display the web page.
How To Enable Keep-Alive
Keep-Alive (also known as HTTP Keep-Alive or persistent connection) is a bit of communication (message) between the client and server that says: “You may grab many files.”Keep-Alive is enabled by explicitly requesting it via HTTP header. If you are able to access your Apache configuration file (httpd.conf), you can turn on keep-alive there.

Properties That Affect Keep-Alive Functionality:
KeepAlive - On or Off
MaxKeepAliveRequests - It sets the maximum number of requests for every Keep-Alive connection
KeepAliveTimeout - This setting prevents unused connections from hanging around for too long. It sets how long your server should wait for new requests from clients.
A value between 7 to 10 seconds is usually ideal. With higher traffic this value can go extremely higher to make sure there is no frequent TCP connection re-initiated

Benefits Of Keep-Alive:
Reduced CPU usage
Reduced Latency
highly recommended to enable Keep-Alive for HTTPS connections 

Conclusion:
Unlike HTTP/1.0 keep-alive connections, HTTP/1.1 connections are always active. HTTP/1.1 assumes all connections are persistent unless the response contains a "Connection: close" header. But not sending "Connection: close" does not mean that the server maintains the connection forever and it's still possible for the connection to be dropped.

Creating NPM modules
Node.js has the ability to create custom modules and allows you to include those custom modules in your Node.js application.
var exports=module.exports={};
The "exports" keyword is used to ensure that the functionality defined in this file can actually be accessed by other files.
exports.AddNumber=function(a,b)
{
return a+b;
};
 The function is added to the module "exports" to make the function as a public function that can be accessed by other application modules.
 
How to access these functions:
==============================
 var Addition=require('./Addition.js');
 using the "require" keyword to include the functionality in the Addition.js file
 
 Addition.AddNumber(1,2)
 Since the functions in the Addition.js file are now accessible, we can now make a call to the AddNumber function
 
